{
  "_args": [
    [
      {
        "raw": "form-serialize@git+https://github.com/brettz9/form-serialize.git#browser",
        "scope": null,
        "escapedName": "form-serialize",
        "name": "form-serialize",
        "rawSpec": "git+https://github.com/brettz9/form-serialize.git#browser",
        "spec": "git+https://github.com/brettz9/form-serialize.git#browser",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:brettz9/form-serialize.git#browser",
          "sshUrl": "git+ssh://git@github.com/brettz9/form-serialize.git#browser",
          "httpsUrl": "git+https://github.com/brettz9/form-serialize.git#browser",
          "gitUrl": "git://github.com/brettz9/form-serialize.git#browser",
          "shortcut": "github:brettz9/form-serialize#browser",
          "directUrl": "https://raw.githubusercontent.com/brettz9/form-serialize/browser/package.json"
        }
      },
      "/Users/brett/bahaiwritings/node_modules/textbrowser"
    ]
  ],
  "_from": "git+https://github.com/brettz9/form-serialize.git#browser",
  "_id": "form-serialize@0.7.1",
  "_inCache": true,
  "_location": "/form-serialize",
  "_phantomChildren": {},
  "_requested": {
    "raw": "form-serialize@git+https://github.com/brettz9/form-serialize.git#browser",
    "scope": null,
    "escapedName": "form-serialize",
    "name": "form-serialize",
    "rawSpec": "git+https://github.com/brettz9/form-serialize.git#browser",
    "spec": "git+https://github.com/brettz9/form-serialize.git#browser",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:brettz9/form-serialize.git#browser",
      "sshUrl": "git+ssh://git@github.com/brettz9/form-serialize.git#browser",
      "httpsUrl": "git+https://github.com/brettz9/form-serialize.git#browser",
      "gitUrl": "git://github.com/brettz9/form-serialize.git#browser",
      "shortcut": "github:brettz9/form-serialize#browser",
      "directUrl": "https://raw.githubusercontent.com/brettz9/form-serialize/browser/package.json"
    }
  },
  "_requiredBy": [
    "/textbrowser"
  ],
  "_resolved": "git+https://github.com/brettz9/form-serialize.git#54db8f3300964593f4869dd76062c2db4f5a4d11",
  "_shasum": "8078bc69289d6389244c0255fd788ed10b897d5d",
  "_shrinkwrap": null,
  "_spec": "form-serialize@git+https://github.com/brettz9/form-serialize.git#browser",
  "_where": "/Users/brett/bahaiwritings/node_modules/textbrowser",
  "author": {
    "name": "Roman Shtylman",
    "email": "shtylman@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/shtylman/form-serialize/issues"
  },
  "dependencies": {},
  "description": "serialize html forms",
  "devDependencies": {
    "domify": "~1.4.0",
    "eslint": "3.19.0",
    "eslint-config-standard": "10.2.1",
    "eslint-plugin-compat": "1.0.2",
    "eslint-plugin-import": "2.2.0",
    "eslint-plugin-node": "4.2.2",
    "eslint-plugin-promise": "3.5.0",
    "eslint-plugin-standard": "3.0.1",
    "zuul": "~3.10.1"
  },
  "directories": {
    "test": "test"
  },
  "gitHead": "54db8f3300964593f4869dd76062c2db4f5a4d11",
  "homepage": "https://github.com/shtylman/form-serialize#readme",
  "keywords": [
    "form",
    "serialize"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "form-serialize",
  "optionalDependencies": {},
  "readme": "# form-serialize [![Build Status](https://travis-ci.org/defunctzombie/form-serialize.png?branch=master)](https://travis-ci.org/defunctzombie/form-serialize)\n\nserialize form fields to submit a form over ajax\n\n## install\n\n```shell\nnpm install form-serialize\n```\n\n## use\n\nform-serialize supports two output formats, url encoded (default) or hash (js objects).\n\nLets serialize the following html form:\n```html\n<form id=\"example-form\">\n\t<input type=\"text\" name=\"foo\" value=\"bar\"/>\n\t<input type=\"submit\" value=\"do it!\"/>\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#example-form');\n\nvar str = serialize(form);\n// str -> \"foo=bar\"\n\nvar obj = serialize(form, { hash: true });\n// obj -> { foo: 'bar' }\n```\n\n## api\n\n### serialize(form [, options])\n\nReturns a serialized form of a HTMLForm element. Output is determined by the serializer used. Default serializer is url-encoded.\n\narg | type | desc\n:--- | :--- | :---\nform | HTMLForm | must be an HTMLForm element\noptions | Object | optional options object\n\n#### options\n\noption | type | default | desc\n:--- | :--- | :---: | :---\nhash | boolean | false | if `true`, the hash serializer will be used for `serializer` option\nserializer | function | url-encoding | override the default serializer (hash or url-encoding)\ndisabled | boolean | false | if `true`, disabled fields will also be serialized\nempty | boolean | false | if `true`, empty fields will also be serialized\n\n### custom serializer\n\nSerializers take 3 arguments: `result`, `key`, `value` and should return a newly updated result.\n\nSee the example serializers in the index.js source file.\n\n## notes\n\nonly [successful control](http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2) form fields are serialized (with the exception of disabled fields if disabled option is set)\n\nmultiselect fields with more than one value will result in an array of values in the `hash` output mode using the default hash serializer\n\n### explicit array fields\n\nFields who's name ends with `[]` are **always** serialized as an array field in `hash` output mode using the default hash serializer.\nThe field name also gets the brackets removed from its name.\n\nThis does not affect `url-encoding` mode output in any way.\n\n```html\n<form id=\"example-form\">\n\t<input type=\"checkbox\" name=\"foo[]\" value=\"bar\" checked />\n\t<input type=\"checkbox\" name=\"foo[]\" value=\"baz\" />\n\t<input type=\"submit\" value=\"do it!\"/>\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#example-form');\n\nvar obj = serialize(form, { hash: true });\n// obj -> { foo: ['bar'] }\n\nvar str = serialize(form);\n// str -> \"foo[]=bar\"\n\n```\n\n### indexed arrays\n\nAdding numbers between brackets for the array notation above will result in a hash serialization with explicit ordering based on the index number regardless of element ordering.\n\nLike the \"[explicit array fields](explicit-array-fields)\" this does not affect url-encoding mode output in any way.\n\n```html\n<form id=\"todos-form\">\n\t<input type=\"text\" name=\"todos[1]\" value=\"milk\" />\n\t<input type=\"text\" name=\"todos[0]\" value=\"eggs\" />\n\t<input type=\"text\" name=\"todos[2]\" value=\"flour\" />\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#todos-form');\n\nvar obj = serialize(form, { hash: true });\n// obj -> { todos: ['eggs', 'milk', 'flour'] }\n\nvar str = serialize(form);\n// str -> \"todos[1]=milk&todos[0]=eggs&todos[2]=flour\"\n\n```\n\n### nested objects\n\nSimilar to the indexed array notation, attribute names can be added by inserting a string value between brackets. The notation can be used to create deep objects and mixed with the array notation.\n\nLike the \"[explicit array fields](explicit-array-fields)\" this does not affect url-encoding mode output.\n\n```html\n<form id=\"nested-example\">\n\t<input type=\"text\" name=\"foo[bar][baz]\" value=\"qux\" />\n\t<input type=\"text\" name=\"foo[norf][]\" value=\"item 1\" />\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#todos-form');\n\nvar obj = serialize(form, { hash: true });\n// obj -> { foo: { bar: { baz: 'qux' } }, norf: [ 'item 1' ] }\n\n```\n\n## references\n\nThis module is based on ideas from jQuery serialize and the Form.serialize method from the prototype library\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shtylman/form-serialize.git"
  },
  "scripts": {
    "test": "zuul -- test/index.js",
    "test-local": "zuul --local -- test/index.js"
  },
  "version": "0.7.1"
}
